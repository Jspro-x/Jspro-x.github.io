<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js基础之面向对象</title>
      <link href="/2021/12/16/js-ji-chu-zhi-mian-xiang-dui-xiang/"/>
      <url>/2021/12/16/js-ji-chu-zhi-mian-xiang-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>class跟let、const一样：不存在变量提升、不能重复声明…</strong></p><p>es5面向对象写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p><p>ES6 的<code>class</code>可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//es5</span><span class="token keyword">function</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//等价于</span><span class="token comment">//es6</span><span class="token keyword">class</span> <span class="token class-name">Fn</span><span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token constant">F</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//3</span></code></pre><p>构造函数的<code>prototype</code>属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的<code>prototype</code>属性上面。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 等同于</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>类的内部所有定义的方法，都是不可枚举的（non-enumerable），这与es5不同。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//es5</span><span class="token keyword">var</span> <span class="token function-variable function">Fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Point</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">// ["toString"]</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">// ["constructor","add"]</span><span class="token comment">//es6</span><span class="token keyword">class</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">// []</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span><span class="token class-name">Fn</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">// ["constructor","add"]</span></code></pre><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>类和模块的内部，默认就是严格模式，所以不需要使用<code>use strict</code>指定运行模式。只要你的代码写在类或模块之中，就只有严格模式可用。</p><p>考虑到未来所有的代码，其实都是运行在模块之中，所以 ES6 实际上把整个语言升级到了严格模式。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显式定义，一个空的<code>constructor</code>方法会被默认添加。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 等同于</span><span class="token keyword">class</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>constructor</code>方法默认返回实例对象（即<code>this</code>），完全可以指定返回另外一个对象。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token comment">// false</span><span class="token comment">//constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。</span></code></pre><h3 id="类必须使用new调用"><a href="#类必须使用new调用" class="headerlink" title="类必须使用new调用"></a>类必须使用new调用</h3><p>类必须使用<code>new</code>调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></code></pre><h3 id="Class-表达式"><a href="#Class-表达式" class="headerlink" title="Class 表达式"></a>Class 表达式</h3><p>与函数一样，类也可以使用表达式的形式定义。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MyClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Me</span> <span class="token punctuation">{</span>  <span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Me<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是<code>MyClass</code>而不是<code>Me</code>，<code>Me</code>只在 Class 的内部代码可用，指代当前类。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> inst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inst<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Me</span>Me<span class="token punctuation">.</span>name <span class="token comment">// ReferenceError: Me is not defined</span></code></pre><p>如果类的内部没用到的话，可以省略<code>Me</code>，也就是可以写成下面的形式。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MyClass <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>采用 Class 表达式，可以写出立即执行的 Class。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">class</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "张三"</span></code></pre><p>上面代码中，<code>person</code>是一个立即执行的类的实例。</p><h3 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h3><p>私有方法/私有属性是常见需求，但 ES6 不提供，只能通过变通方法模拟实现。（以后会实现）</p><p>通常是在命名上加以区别。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span>  <span class="token comment">// 公有方法</span>  <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//....</span>  <span class="token punctuation">}</span>  <span class="token comment">// 假装是私有方法（其实外部还是可以访问）</span>  <span class="token function">_bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//....</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原型的属性"><a href="#原型的属性" class="headerlink" title="原型的属性"></a>原型的属性</h3><p>class定义类时，只能在constructor里定义属性，在其他位置会报错。</p><p>如果需要在原型上定义方法可以使用：</p><ol><li>Fn.prototype.prop = value;</li><li>Object.getPrototypeOf()获取原型，再来扩展</li><li>Object.assign(Fn.prototype,{在这里面写扩展的属性或者方法})</li></ol><h3 id="Class-的静态方法"><a href="#Class-的静态方法" class="headerlink" title="Class 的静态方法"></a>Class 的静态方法</h3><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。</p><p>如果在一个方法前，加上<code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p><p>ES6 明确规定，Class 内部只有静态方法，没有静态属性。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 'hello'</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span><span class="token function">classMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// TypeError: foo.classMethod is not a function</span><span class="token comment">//静态属性只能手动设置</span><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Foo<span class="token punctuation">.</span>prop <span class="token comment">// 1</span></code></pre><h3 id="get、set"><a href="#get、set" class="headerlink" title="get、set"></a>get、set</h3><p>存值函数和取值函数，不多说，看代码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">//先声明一个类</span><span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>    <span class="token comment">//构造函数中设置默认值</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">'草莓'</span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token string">'30'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price    <span class="token punctuation">}</span>    <span class="token keyword">get</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>    <span class="token keyword">set</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//set的使用</span><span class="token keyword">let</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span><span class="token comment">//这里使用setName修改对象的属性</span><span class="token comment">//这里切记直接赋值，setName不需要括号</span>f1<span class="token punctuation">.</span>setName <span class="token operator">=</span> <span class="token string">'荔枝'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f1'</span><span class="token punctuation">,</span> f1<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>getName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//荔枝</span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Fn2</span> <span class="token keyword">extends</span> <span class="token class-name">Fn</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</li></ol><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//必须调用</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span></code></pre><ol><li>父类的静态方法也会被继承。</li></ol><blockquote><p>嗯！就是这么让人绝望</p></blockquote><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a>Object.getPrototypeOf()</h3><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。</p><pre class="language-js" data-language="js"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>Fn2<span class="token punctuation">)</span> <span class="token operator">===</span> Fn<span class="token comment">// true</span></code></pre><p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><p><code>super</code>这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p><p>第一种情况，<code>super</code>作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次<code>super</code>函数。</p><blockquote><p>作为函数时，<code>super()</code>只能用在子类的构造函数之中，用在其他地方就会报错。</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面代码中，子类<code>B</code>的构造函数之中的<code>super()</code>，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</p><p>注意，<code>super</code>虽然代表了父类<code>A</code>的构造函数，但是返回的是子类<code>B</code>的实例，即<code>super</code>内部的<code>this</code>指的是<code>B</code>，因此<code>super()</code>在这里相当于<code>A.prototype.constructor.call(this)</code>。</p><p>第二种情况，<code>super</code>作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，子类<code>B</code>当中的<code>super.p()</code>，就是将<code>super</code>当作一个对象使用。这时，<code>super</code>在普通方法之中，指向<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。</p><p>由于<code>this</code>指向子类，所以如果通过<code>super</code>对某个属性赋值，这时<code>super</code>就是<code>this</code>，赋值的属性会变成子类实例的属性。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面代码中，<code>super.x</code>赋值为<code>3</code>，这时等同于对<code>this.x</code>赋值为<code>3</code>。而当读取<code>super.x</code>的时候，读的是<code>A.prototype.x</code>，所以返回<code>undefined</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础之定时器</title>
      <link href="/2021/12/16/js-ji-chu-zhi-ding-shi-qi/"/>
      <url>/2021/12/16/js-ji-chu-zhi-ding-shi-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><ol><li><p>setTimeout() 用来指定某个函数或字符串在指定的毫秒数之后执行 <strong>只执行一次</strong></p><ul><li>clearTimeout() 清除定时器</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*setTimeout() 有两个参数1.执行体 注意:函数传递参数可以把实参放在时间参数的后面(不兼容IE9及以下)2.时间 多久执行*/</span><span class="token keyword">let</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    a<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment">//clearTimeout() //参数是定时器的名称</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> <span class="token function-variable function">fun</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    a<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fun<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器停止了"</span><span class="token punctuation">)</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>setInterval() 用来指定某个函数或字符串在指定的毫秒数之后执行 <strong>无限循环</strong></p><ul><li>clearInterval() 清除定时器</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//传递参数是一样的结构</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器停止了"</span><span class="token punctuation">)</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>requestAnimationFrame() 浏览器专门为动画提供的API 浏览器会自动优化方法的调用 页面不是激活的状态下 动画暂停 有效节省CPU开销 用法与setTimeout相似 只是不需要设置时间间隔</p><ul><li>cancelAnimationFrame()</li></ul><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//复合动画帧的计时器,使得动画更流畅,也只是执行一次</span><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token operator">++</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"定时器停止了"</span><span class="token punctuation">)</span>    <span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础之常用api</title>
      <link href="/2021/12/16/js-ji-chu-zhi-chang-yong-api/"/>
      <url>/2021/12/16/js-ji-chu-zhi-chang-yong-api/</url>
      
        <content type="html"><![CDATA[<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><h3 id="toFixed"><a href="#toFixed" class="headerlink" title="toFixed()"></a>toFixed()</h3><p>四舍五入指定小数位数，返回结果为字符串</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token comment">// 保留两位小数</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3.14</span><span class="token comment">// 保留三位小数</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 3.142</span></code></pre><h3 id="Number-isNaN"><a href="#Number-isNaN" class="headerlink" title="Number.isNaN()"></a>Number.isNaN()</h3><p>判断一个数是否是NaN</p><pre class="language-js" data-language="js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">// false </span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span> <span class="token comment">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// true</span></code></pre><h3 id="Number-isFinite"><a href="#Number-isFinite" class="headerlink" title="Number.isFinite()"></a>Number.isFinite()</h3><p>检测某个值是否是有限数字</p><pre class="language-js" data-language="js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">12346546546545646546464646465456456456</span><span class="token punctuation">)</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// false</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">'abd'</span><span class="token punctuation">)</span> <span class="token comment">// false</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span> <span class="token comment">// false</span></code></pre><h3 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h3><p>检测某个值是否为整数</p><pre class="language-js" data-language="js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">123.0</span><span class="token punctuation">)</span> <span class="token comment">// true</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token number">123.1</span><span class="token punctuation">)</span> <span class="token comment">// false</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">// false</span></code></pre><h3 id="Number-parseInt"><a href="#Number-parseInt" class="headerlink" title="Number.parseInt()"></a>Number.parseInt()</h3><p>parseInt() 函数可解析一个字符串，并返回一个整数。</p><pre class="language-js" data-language="js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123.456'</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123aaa'</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'123.456aaa'</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">'a123'</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span></code></pre><h3 id="Number-parseFloat"><a href="#Number-parseFloat" class="headerlink" title="Number.parseFloat()"></a>Number.parseFloat()</h3><p>parseInt() 函数可解析一个字符串，并返回一个浮点数。</p><pre class="language-js" data-language="js"><code class="language-js">Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.456'</span><span class="token punctuation">)</span> <span class="token comment">// 123.456</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123aaa'</span><span class="token punctuation">)</span> <span class="token comment">// 123</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'123.456aaa'</span><span class="token punctuation">)</span> <span class="token comment">// 123.456</span>Number<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">'a123'</span><span class="token punctuation">)</span> <span class="token comment">// NaN</span></code></pre><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h3><p>返回指定位置的字符串unicode编码</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"abcde"</span>str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// 99 </span></code></pre><h3 id="String-fromCharCode"><a href="#String-fromCharCode" class="headerlink" title="String.fromCharCode()"></a>String.fromCharCode()</h3><p> 通过unicode编码排序值返回对应的字符</p><pre class="language-js" data-language="js"><code class="language-js">String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment">// c</span></code></pre><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p>substring( startNum , endNum ) 截取字符串</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello"</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// e</span><span class="token comment">// startNum 参数为起始位置(包含), endNum 参数结束位置(不包含)</span><span class="token comment">// endNum 参数不写 默认截取所有的</span></code></pre><h3 id="substr"><a href="#substr" class="headerlink" title="substr( )"></a>substr( )</h3><p>substr(startNum, length)    截取字符串</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello"</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">//el</span><span class="token comment">// startNum 参数为起始位置(包含), length 参数截取长度</span><span class="token comment">// length 参数不写 默认截取所有的</span></code></pre><h3 id="slice"><a href="#slice" class="headerlink" title="slice( )"></a>slice( )</h3><p>slice 使用与substring 相同</p><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h3><p>清除左右空格</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">" hello  "</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "hello"</span></code></pre><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><p>replace( str , repStr )  替换字符串</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"12345abcdef"</span><span class="token keyword">let</span> str1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token comment">// 14345abcdef</span><span class="token comment">// str 参数为查找字符的被替换字符, repStr 参数值 将替换str值</span><span class="token comment">// 如果没有查询到将返回原字符串</span></code></pre><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>字符串切割成数组,从选择器切割</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"hello"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// ["h", "llo"]</span></code></pre><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h3><p>indexOf( Str[,num])  查找到字符串返回下标,否则返回-1,</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str<span class="token operator">=</span><span class="token string">"hello"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span><span class="token comment">// Str 参数为查找字符, num 参数为查找开始位置</span><span class="token comment">// num参数不写 默认从0开始</span></code></pre><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h3><p>返回结果与indexOf相同, 检索方向为从后往前; </p><h3 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(),startsWith(),endsWith()"></a>includes(),startsWith(),endsWith()</h3><blockquote><p>includes((str[,num])  返回布尔值，表示是否找到了参数字符串</p><p>startsWith((str[,num])   返回布尔值，表示参数字符串是否在原字符串的头部</p><p>endsWith((str[,num])     返回布尔值，表示参数字符串是否在原字符串的尾部</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"apple banana"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// true</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// false</span><span class="token comment">// Str 参数为查找字符, num 参数为查找开始位置</span><span class="token comment">// num参数不写 默认从0开始</span></code></pre><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p>repeat(n)  将字符串重复n次</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">"夏栀"</span><span class="token punctuation">;</span><span class="token keyword">let</span> repstr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>repstr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//夏栀夏栀夏栀</span><span class="token comment">// n 参数为重复几次   参数如果是小数，会被向下取整</span></code></pre><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><p>  push(data[,data])   依次往数组最后添加数组项 ,可以添加多个</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// [1,2,3,4,5]  </span><span class="token comment">// 返回值新数组的length    改变原数组</span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><p>删除数组最后一项</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [1,2]</span><span class="token comment">// 返回值是删除的数值  改变原数组</span></code></pre><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><p>移除数组中第一项并返回该项</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>     <span class="token comment">// [2,3]</span><span class="token comment">// 返回值是删除的数值   改变原数组</span></code></pre><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><p> 在数组前添加任意数组项,可以添加多个</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">// 改变原数组       </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [0,1,2,3] </span><span class="token comment">// 返回值新数组的length          改变原数组</span></code></pre><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><p>splice(index,num,info)  具有截取,替换,添加方法</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//- index 从数组第几个项开始</span><span class="token comment">//- num  截取的数量 </span><span class="token comment">//- info 从截取位置开始添加数组项</span><span class="token comment">//- 会改变原数组  返回截取的数组</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token comment">//1)截取方法     截取数量</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//2)添加方法    截取数量为零</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">// 添加多个  </span><span class="token comment">//4)替代方法    截取数量与添加相同</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><p>sort( function ) 数组排序</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// function 参数为一个函数体   函数体接收两个形参</span><span class="token comment">// 不传参数 根据ASCII码表 来比较数组中的第一个值排序</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b <span class="token comment">//从小到大排列</span>    <span class="token keyword">return</span> b <span class="token operator">-</span> a <span class="token comment">//从达到小排列</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>合并两个数组为一个新的数组  不改变原数组</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p> join(str)  根据参数规则返回新的字符串 不改变原数组</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span> <span class="token comment">// 1-2-3-4</span><span class="token comment">// 将数组合并成字符串</span></code></pre><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><p> 数组反向排序  改变原数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span>  <span class="token comment">// [4, 3, 2, 1]</span></code></pre><h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h3><p>slice(startNum,endNum)   截取数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// startNum 参数为起始位置(包含), endNum 参数结束位置(不包含)</span><span class="token comment">// endNum 参数不写 默认截取所有的</span></code></pre><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><p>判断是否是数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//true</span></code></pre><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>把类数组(获取一组元素,arguments)对象转成数组</p><h3 id="indexOf-Str-num"><a href="#indexOf-Str-num" class="headerlink" title="indexOf(Str[,num])"></a>indexOf(Str[,num])</h3><p>查找到数组项返回下标, 否则返回-1,    与字符串使用一样</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// Str 参数为查找字符, num 参数为查找开始位置</span><span class="token comment">// num参数不写 默认从0开始</span></code></pre><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p>查看数组中是否包含参数的值,返回布尔值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span> <span class="token punctuation">,</span> <span class="token string">"origan"</span><span class="token punctuation">,</span><span class="token string">"banana"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span><span class="token keyword">var</span> b <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"apple2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span></code></pre><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><p>循环数组,无返回值</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>正常情况下,需要配合return使用,返回新数组,如果没有return,这个就相当于forEach</p><p>map如果没有return 则返回元素项数个undefined组成的新数组</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token comment">// 整理数据结构</span><span class="token keyword">let</span> arr<span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">"aa"</span><span class="token punctuation">,</span>read<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">"bb"</span><span class="token punctuation">,</span>read<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">"cc"</span><span class="token punctuation">,</span>read<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    json<span class="token punctuation">.</span>shop <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">*</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">--</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    json<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">￥</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>item<span class="token punctuation">.</span>read<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">元</span><span class="token template-punctuation string">`</span></span>    <span class="token keyword">return</span> json<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>用的极少,比如求数组的和,阶乘都可以</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token keyword">let</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>cur<span class="token punctuation">,</span>index<span class="token punctuation">,</span>arr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> prev <span class="token operator">+</span> cur<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//55</span><span class="token comment">// prev是上一次的运算结果,cur是当前的值,index是当前的下标,arr是当前的数组</span></code></pre><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Object.assign(目标对象,需要合并的对象)</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> json2 <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> json3 <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>json<span class="token punctuation">,</span>json2<span class="token punctuation">,</span>json3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// {a: 1, b: 2, c: 3}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础之作用域</title>
      <link href="/2021/12/16/js-ji-chu-zhi-zuo-yong-yu/"/>
      <url>/2021/12/16/js-ji-chu-zhi-zuo-yong-yu/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域通俗的说，是变量起作用的范围。因为每个变量都有对应的“生活环境”</p><p>JavaScript中作用域主要分为以下几种：</p><ul><li>全局作用域（即script标签内的空间）</li><li>函数作用域（每个函数的花括号内的部分）</li><li>块作用域（除函数外，其他的花括号空间都是块作用域，如if的花括号）</li></ul><p><strong>变量只提供给当前环境和当前环境的子环境进行使用。</strong></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>Examples<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token comment">// 此时这里是script内部，所以这个空间是一个全局作用域，在此环境声明的变量为全局变量</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// a 为全局变量</span><span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 这是函数体内，所以这个小空间是函数作用域</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// 此时这个变量a服务与这个空间和这个空间的子空间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 当前使用的a在这个环境中存在，所以输出 2</span><span class="token punctuation">{</span><span class="token comment">// 此处，直接写了一个花括号，那么就开启一个独立的空间</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 此时当前空间没有a，所以向上个空间查找，就找到函数内的a，所以输出 2</span><span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 此时的console语句是在全局环境执行，所以这里的a不是函数内的，而是全局环境的a  所以输出 1</span><span class="token keyword">let</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// 此时这个块作用域自身空间没有a，向上级空间查找，上级空间是fn2的函数空间，也没有找到，继续向上级查找，在全局空间找到了，所以输出 1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span></code></pre><p>上图作用域结构如下图所示</p><img src="/2021/12/16/js-ji-chu-zhi-zuo-yong-yu/1.png" class=""><p>查找的规则是，先查找自身，如果查找到就用，就不在向上查找，如果没有依次向上层作用域找，直到找到为止。如果找到全局都没有找到对应名称的变量，则抛出错误<code>xxx is not defined</code>。这就是作用域的规则。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的学习笔记（一）</title>
      <link href="/2021/12/15/git-xue-xi-bi-ji-yi/"/>
      <url>/2021/12/15/git-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="GIT学习笔记（一）"><a href="#GIT学习笔记（一）" class="headerlink" title="GIT学习笔记（一）"></a>GIT学习笔记（一）</h2><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>创建用户和邮箱</p><pre class="language-git" data-language="git"><code class="language-git">$ git config --global user.name "Jspro_x"$ git config --global user.email "zx2272982792@gmail.com"</code></pre></li><li><p>生成目录、转到生成目录和显示当前目录</p><pre class="language-git" data-language="git"><code class="language-git">$ mkdir js$ cd js$ pwd</code></pre></li><li><p>把这个目录变成Git可以管理的仓库、显示隐藏目录</p><pre class="language-git" data-language="git"><code class="language-git">$ git int$ ls -ah</code></pre></li><li><p>添加一个文件到仓库，并提交到仓库里</p><pre class="language-git" data-language="git"><code class="language-git">$ git add text.txt//这个文件是在js目录下创建$ git commit -m "wrote a test file"//引号内为文件简要说明</code></pre></li><li><p>查看当前仓库状态</p><pre class="language-none"><code class="language-none">$ git status</code></pre></li><li><p>查看文件的difference</p><pre class="language-git" data-language="git"><code class="language-git">$git diff test.txt</code></pre></li><li><p>显示从最近到最远的提交日志</p><pre class="language-git" data-language="git"><code class="language-git">$ git log$ git log --pretty = oneline//简写</code></pre><img src="/2021/12/15/git-xue-xi-bi-ji-yi/1.png" class=""><img src="/2021/12/15/git-xue-xi-bi-ji-yi/2.png" class=""></li><li><p>回溯到上个版本</p><pre class="language-git" data-language="git"><code class="language-git">$ git reset --hard HEAD^HEAD is now at e475afc add distributed$ cat test.txtGit is a distributed version control system.Git is free software.</code></pre></li><li><p>再来到最新的版本</p><pre class="language-none"><code class="language-none">$ git reset --hard f3f18//最新的版本号HEAD is now at f3f182a append GPL$ cat test.txtGit is a distributed version control system.Git is free software distributed under the GPL.</code></pre></li><li><p>显示历史命令的commit id</p><pre class="language-git" data-language="git"><code class="language-git">$ git reflogf3f182a (HEAD -&gt; master) HEAD@{0}: reset: moving to f3f1836a007f HEAD@{1}: reset: moving to HEAD^f3f182a (HEAD -&gt; master) HEAD@{2}: commit: append GPL36a007f HEAD@{3}: commit: add distributed7f88345 HEAD@{4}: commit (initial): wwrote a test file</code></pre></li><li><p>小结</p><ul><li><p><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p></li><li><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p></li><li><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></li></ul></li></ul><h4 id="工作区和缓存区"><a href="#工作区和缓存区" class="headerlink" title="工作区和缓存区"></a>工作区和缓存区</h4><p>​        Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><img src="/2021/12/15/git-xue-xi-bi-ji-yi/5.png" class=""><p>   第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>   第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分       支。</p><p>   因为创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p><p>   可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage）</p><pre class="language-git" data-language="git"><code class="language-git">$ git add test.txt$ git add LICENSE</code></pre><img src="/2021/12/15/git-xue-xi-bi-ji-yi/6.png" class=""><p>执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><pre class="language-none"><code class="language-none">$ git commit -m "understand how stage woeks"[master 353e02b] understand how stage woeks 2 files changed, 3 insertions(+), 1 deletion(-) create mode 100644 LICENSE</code></pre><img src="/2021/12/15/git-xue-xi-bi-ji-yi/7.png" class=""><h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><ul><li>具体操作</li></ul><pre class="language-git" data-language="git"><code class="language-git">$ cat test.txt//第一次修改Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes.$git add test.txt$git statusOn branch masterChanges to be committed:  (use "git restore --staged &lt;file&gt;..." to unstage)        modified:   test.txt$ cat test.txt//第二次修改Git is a distributed version control system.Git is free software distributed under the GPL.Git has a mutable index called stage.Git tracks changes of files.$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git restore &lt;file&gt;..." to discard changes in working directory)        modified:   test.txtno changes added to commit (use "git add" and/or "git commit -a")//这里显示提交的只是第一次放到缓存区的内容</code></pre><p>​        Git管理的是修改，当用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，**<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。**</p><pre class="language-git" data-language="git"><code class="language-git">$ git diff HEAD -- test.txtdiff --git a/test.txt b/test.txtindex db28b2c..9a8b341 100644--- a/test.txt+++ b/test.txt@@ -1,4 +1,4 @@ Git is a distributed version control system. Git is free software distributed under the GPL. Git has a mutable index called stage.-Git tracks changes.\ No newline at end of file+Git tracks changes of files.\ No newline at end of file</code></pre><p>​        可见，第二次修改确实没有被提交。</p><p>​        那怎么提交第二次修改呢？可以继续<code>git add</code>再<code>git commit</code>，也可以别着急提交第一次修改，先<code>git add</code>第二次修改，再<code>git commit</code>，就相当于把两次修改合并后一块提交了：</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code></p><ul><li><p>小结</p><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4></li><li><p>工作区撤销修改：</p></li></ul><pre class="language-git" data-language="git"><code class="language-git">$ git checkout -- test.txt</code></pre><ul><li>把暂存区的修改撤销掉,转到工作区：</li></ul><pre class="language-none"><code class="language-none">$ git reset HEAD test.txtUnstaged changes after reset:M       test.txt</code></pre><p>​      <code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本，再在工作区执行相应撤销命令即可。</p><ul><li>删除：</li></ul><pre class="language-git" data-language="git"><code class="language-git">$ git rm test2.txtrm 'test2.txt'$ git checkout -- test2.txt</code></pre><p>​      <code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><p>从来没有被添加到版本库就被删除的文件，是无法恢复的！</p><ul><li>小结</li></ul><p>场景1：当改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192">版本回退</a>一节，不过前提是没有推送到远程库。</p><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><ul><li><p>关联自己的仓库(要先在自己的github上先建好一个类似的空仓库)</p><pre class="language-git" data-language="git"><code class="language-git">$git remote add origin git@github.com:Jspro-x/Jspro-x.git</code></pre></li><li><p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的（先把生成好的密钥黏贴到自己建好的github仓库的ssh内）本地库的所有内容推送到远程库</p></li></ul><pre class="language-git" data-language="git"><code class="language-git">$ git push -u origin masterCounting objects: 20, done.Delta compression using up to 4 threads.Compressing objects: 100% (15/15), done.Writing objects: 100% (20/20), 1.64 KiB | 560.00 KiB/s, done.Total 20 (delta 5), reused 0 (delta 0)remote: Resolving deltas: 100% (5/5), done.To github.com:michaelliao/learngit.git * [new branch]      master -&gt; masterBranch 'master' set up to track remote branch 'master' from 'origin'.</code></pre><ul><li> 小结</li></ul><p>要关联一个远程库，使用命令<code>git remote add origin git@server-name:path/repo-name.git</code>；</p><p>关联一个远程库时必须给远程库指定一个名字，<code>origin</code>是默认习惯命名；</p><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步。</p><p>克隆</p><pre class="language-git" data-language="git"><code class="language-git">$ git clone git@github.com:Jspro-x/vue2-elm</code></pre><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><ul><li>具体操作</li></ul><img src="/2021/12/15/git-xue-xi-bi-ji-yi/3.png" class=""><img src="/2021/12/15/git-xue-xi-bi-ji-yi/4.png" class=""><ul><li><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5></li></ul><p>Git鼓励大量使用分支：</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS的高级运用（一）</title>
      <link href="/2021/12/13/css-gao-ji-yun-yong-yi/"/>
      <url>/2021/12/13/css-gao-ji-yun-yong-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS高级运用（一）"><a href="#CSS高级运用（一）" class="headerlink" title="CSS高级运用（一）"></a>CSS高级运用（一）</h2><h3 id="双伪素构建三角效果"><a href="#双伪素构建三角效果" class="headerlink" title="双伪素构建三角效果"></a>双伪素构建三角效果</h3><p>如图运用CSS实现下图的三角效果：</p><img src="/2021/12/13/css-gao-ji-yun-yong-yi/1.png" class="" title="1.三角效果"><ul><li><p>先搭建html骨架：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>验证身份<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ico<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入6位验证码<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>验证<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></code></pre></li><li><p>实现原理：主要运用border属性，把双伪元素的宽高先设为0，用border挤出4个三角形，再分别把其它三个三角形设置为透明色也就是transparent属性，先把before伪元素的宽度设置大一点，把before颜色设置为父元素before颜色，再用子绝父相定位到合适的位置；剩下的after伪元素的宽度设置比before伪元素的宽度小1px，再把after伪元素颜色设置为#fff，再用子绝父相定位到比before位置的left属性大1px压住before的绝大部分，其它相同，好了现在效果就出来了。</p></li><li><p>具体CSS样式：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;    .box</span> <span class="token punctuation">{</span>        <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token comment">/* align-items: center; */</span>        <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 180px auto<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">h2</span> <span class="token punctuation">{</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 30px auto<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">.ico</span> <span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 88px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgba</span><span class="token punctuation">(</span>8<span class="token punctuation">,</span> 189<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 2px 4px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment">/* 添加三角效果 */</span>    <span class="token selector">.ico::before,    .ico::after</span> <span class="token punctuation">{</span>        <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>        <span class="token property">border-color</span><span class="token punctuation">:</span> #fff transparent transparent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">.ico::before</span> <span class="token punctuation">{</span>        <span class="token property">left</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> 7px<span class="token punctuation">;</span>        <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>8<span class="token punctuation">,</span> 189<span class="token punctuation">,</span> 235<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">.ico::after</span> <span class="token punctuation">{</span>        <span class="token property">left</span><span class="token punctuation">:</span> 71px<span class="token punctuation">;</span>        <span class="token property">border-width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">input</span> <span class="token punctuation">{</span>        <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>        <span class="token comment">/* text-align: center; */</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 1px solid <span class="token function">rgb</span><span class="token punctuation">(</span>247<span class="token punctuation">,</span> 129<span class="token punctuation">,</span> 18<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">padding-left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">button</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 140px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>240<span class="token punctuation">,</span> 22<span class="token punctuation">,</span> 22<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token selector">button:hover</span> <span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>177<span class="token punctuation">,</span> 10<span class="token punctuation">,</span> 10<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>209<span class="token punctuation">,</span> 201<span class="token punctuation">,</span> 201<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style&gt;  </code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
